---
title: "My title"
subtitle: "My subtitle if needed"
author: 
  - First author
  - Another author
thanks: "Code and data are available at: LINK."
date: today
date-format: long
abstract: "First sentence. Second sentence. Third sentence. Fourth sentence."
format: pdf
number-sections: true
bibliography: references.bib
---

```{r}
#| include: false
#| warning: false
#| message: false

library(tidyverse)
library(palmerpenguins)
```


# Introduction

You can and should cross-reference sections and sub-sections. We use @citeR and @rohan.

The remainder of this paper is structured as follows. @sec-data....



# Data {#sec-data}

Some of our data is of penguins (@fig-bills), from @palmerpenguins.

```{r}
#| label: fig-bills
#| fig-cap: Bills of penguins
#| echo: false

<<<<<<< HEAD
# install.packages
# install.packages("ggplot2")
# install.packages("dplyr")
# install.packages("showtext")

# load packaged
library(ggplot2)
library(dplyr)
library(showtext)


# Add the desired font (e.g., Patrick Hand)
font_add_google("Patrick Hand", "patrick")

# Set the font for ggplot
showtext_auto()

# Histogram of survival time in days (days_to_death)
ggplot(analysis_data, aes(x = days_to_death)) +
  geom_histogram(binwidth = 50, fill = "forestgreen", color = "black") +
  labs(title = "Distribution of Survival Time in Lung Cancer Patients Post-Diagnosis",
       x = "Survival Time (days)", y = "Frequency") +
  theme_minimal() +
  theme(
    text = element_text(family = "patrick") # Set font to Patrick Hand
  )



# Replace NA values with your desired stages
analysis_data <- analysis_data %>%
  mutate(pathogenic_stage = ifelse(is.na(pathogenic_stage), 
                                   c('Stage I', 'Stage IA', 'Stage IB', 
                                     'Stage II', 'Stage IIA', 'Stage IIB', 
                                     'Stage III', 'Stage IIIA', 'Stage IIIB', 
                                     'Stage IV'), 
                                   pathogenic_stage))






# create bar chart for pathogenic_stage
pathogenic_stage_counts <- analysis_data %>%
  group_by(pathogenic_stage) %>%
  summarise(count = n ()) %>%
  mutate(percentage = count / sum(count) * 100) %>%
  arrange(desc(pathogenic_stage))

ggplot(pathogenic_stage_counts, aes(x = pathogenic_stage, y = percentage)) +
  geom_bar(stat = "identity", fill = "lightpink") +
  labs(title = "Percentage of Patients by Pathogenic Stage",
       x = "Pathogenic Stage",
       y = "Percentage") +
  theme_minimal() +
  theme(
    text = element_text(family = "patrick") # Set font to Patrick Hand
  )





# create bar chart for presence_of_distant metastasis 
presence_of_distant_metastasis_counts <- analysis_data %>%
  group_by(presence_of_distant_metastasis) %>%
  summarise(count = n ()) %>%
  mutate(percentage = count / sum(count) * 100) %>%
  arrange(desc(presence_of_distant_metastasis))

ggplot(presence_of_distant_metastasis_counts, aes(x = presence_of_distant_metastasis, y = percentage)) +
  geom_bar(stat = "identity", fill = "gold") +
  labs(title = "Percentage of Patients by Presence of Distant Metastasis",
       x = "Presence of Distant Metastasis",
       y = "Percentage") +
  theme_minimal() +
  theme(
    text = element_text(family = "patrick") # Set font to Patrick Hand
  )


# create bar chart for lymph node involvement 
lymph_node_involvement_counts <- analysis_data %>%
  group_by(lymph_node_involvement) %>%
  summarise(count = n ()) %>%
  mutate(percentage = count / sum(count) * 100) %>%
  arrange(desc(lymph_node_involvement))

ggplot(lymph_node_involvement_counts, aes(x = lymph_node_involvement, y = percentage)) +
  geom_bar(stat = "identity", fill = "cyan") +
  labs(title = "Percentage of Patients by Lymph Node Involvement",
       x = "Lymph Node Involvement",
       y = "Percentage") +
  theme_minimal() +
  theme(
    text = element_text(family = "patrick") # Set font to Patrick Hand
  )

# create bar chart for tumor size
tumor_size_counts <- analysis_data %>%
  group_by(tumor_size) %>%
  summarise(count = n ()) %>%
  mutate(percentage = count / sum(count) * 100) %>%
  arrange(desc(tumor_size))

ggplot(tumor_size_counts, aes(x = tumor_size, y = percentage)) +
  geom_bar(stat = "identity", fill = "purple") +
  labs(title = "Percentage of Patients by Tumor Size",
       x = "Tumor Size",
       y = "Percentage") +
  theme_minimal() +
  theme(
    text = element_text(family = "patrick") # Set font to Patrick Hand
  )

# create bar chart for treatment decision
ggplot(treatment_decision_counts, aes(x = reorder(treatment_decision, -percentage), y = percentage)) +
  geom_bar(stat = "identity", fill = "blue") +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), hjust = -0.2, color = "black", size = 3) +
  labs(title = "Percentage of Patients by Treatment Decision",
       x = "Treatment Decision",
       y = "Percentage") +
  theme_minimal() +
  coord_flip() +
  theme(
    text = element_text(family = "patrick") # Set font to Patrick Hand
  )

# Create bar chart for treatment type
ggplot(treatment_type_counts, aes(x = reorder(treatment_type, -percentage), y = percentage)) +
  geom_bar(stat = "identity", fill = "orange") +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), hjust = -0.2, color = "black", size = 3) +
  geom_text(data = treatment_type_counts, aes(label = treatment_type), hjust = 1.2, color = "black", size = 3) +
  labs(title = "Percentage of Patients by Treatment Type",
       x = "Treatment Type",
       y = "Percentage") +
  theme_minimal() +
  coord_flip() +
  scale_x_discrete(breaks = seq(0, max(treatment_type_counts$percentage), by = 5)) +
  theme(
    text = element_text(family = "patrick") # Set font to Patrick Hand
  )


=======
ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar(alpha = 0.8) +
  scale_fill_manual(values = c("darkorange","purple","cyan4"),
                    guide = "none") +
  theme_minimal() +
  facet_wrap(~species, ncol = 1) +
  coord_flip()
>>>>>>> 709354f29475a27b7586bc49108ef7890970b340
```

Talk more about it.

And also planes (@fig-planes). (You can change the height and width, but don't worry about doing that until you have finished every other aspect of the paper - Quarto will try to make it look nice and the defaults usually work well once you have enough text.)

```{r}
#| label: fig-planes
#| fig-cap: Relationship between wing length and width
#| echo: false
#| warning: false
#| message: false

analysis_data <- read_csv(here::here("data/analysis_data/analysis_data.csv"))

analysis_data |> 
  ggplot(aes(x = width, y = length)) +
  geom_point(alpha = 0.8) +
  theme_minimal() +
  labs(x = "Wing width (mm)",
       y = "Wing length (mm)")
```

Talk way more about it. 



# Model

The goal of our modelling strategy is twofold. Firstly,...

Here we briefly describe the Bayesian analysis model used to investigate... Background details and diagnostics are included in [Appendix -@sec-model-details].

## Model set-up

Define $y_i$ as the number of seconds that the plane remained aloft. Then $\beta_i$ is the wing width and $\gamma_i$ is the wing length, both measured in millimeters.  

\begin{align} 
y_i|\mu_i, \sigma &\sim \mbox{Normal}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_i + \gamma_i\\
\alpha &\sim \mbox{Normal}(0, 2.5) \\
\beta &\sim \mbox{Normal}(0, 2.5) \\
\gamma &\sim \mbox{Normal}(0, 2.5) \\
\sigma &\sim \mbox{Exponential}(1)
\end{align}

We run the model in R [@citeR] using the `rstanarm` package of @rstanarm. We use the default priors from `rstanarm`.


### Model justification

We expect a positive relationship between the size of the wings and time spent aloft. In particular...

We can use maths by including latex between dollar signs, for instance $\theta$.


# Results

Our results are summarized in @tbl-modelresults.

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(rstanarm)

first_model <-
  readRDS(file = here::here("models/first_model.rds"))
```

```{r}
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| tbl-cap: "Explanatory models of flight time based on wing width and wing length"
#| warning: false

modelsummary::modelsummary(
  list(
    "First model" = first_model
  ),
  statistic = "mad",
  fmt = 2
)
```




# Discussion

## First discussion point {#sec-first-point}

If my paper were 10 pages, then should be be at least 2.5 pages. The discussion is a chance to show off what you know and what you learnt from all this. 

## Second discussion point

## Third discussion point

## Weaknesses and next steps

Weaknesses and next steps should also be included.

\newpage

\appendix

# Appendix {-}


# Additional data details

# Model details {#sec-model-details}

## Posterior predictive check

In @fig-ppcheckandposteriorvsprior-1 we implement a posterior predictive check. This shows...

In @fig-ppcheckandposteriorvsprior-2 we compare the posterior with the prior. This shows... 

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-ppcheckandposteriorvsprior
#| layout-ncol: 2
#| fig-cap: "Examining how the model fits, and is affected by, the data"
#| fig-subcap: ["Posterior prediction check", "Comparing the posterior with the prior"]

pp_check(first_model) +
  theme_classic() +
  theme(legend.position = "bottom")

posterior_vs_prior(first_model) +
  theme_minimal() +
  scale_color_brewer(palette = "Set1") +
  theme(legend.position = "bottom") +
  coord_flip()
```

## Diagnostics

@fig-stanareyouokay-1 is a trace plot. It shows... This suggests...

@fig-stanareyouokay-2 is a Rhat plot. It shows... This suggests...

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| label: fig-stanareyouokay
#| fig-cap: "Checking the convergence of the MCMC algorithm"
#| fig-subcap: ["Trace plot", "Rhat plot"]
#| layout-ncol: 2

plot(first_model, "trace")

plot(first_model, "rhat")
```



\newpage


# References


